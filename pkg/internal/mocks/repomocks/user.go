// Code generated by mockery v2.18.0. DO NOT EDIT.

package repomocks

import (
	model "github.com/eminoz/go-api/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepository) CreateUser(user *model.User) model.UserDto {
	ret := _m.Called(user)

	var r0 model.UserDto
	if rf, ok := ret.Get(0).(func(*model.User) model.UserDto); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(model.UserDto)
	}

	return r0
}

// DeleteUserById provides a mock function with given fields: id
func (_m *UserRepository) DeleteUserById(id string) string {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAllUser provides a mock function with given fields:
func (_m *UserRepository) GetAllUser() []model.UserDto {
	ret := _m.Called()

	var r0 []model.UserDto
	if rf, ok := ret.Get(0).(func() []model.UserDto); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserDto)
		}
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UserRepository) GetUserByEmail(email string) model.UserDto {
	ret := _m.Called(email)

	var r0 model.UserDto
	if rf, ok := ret.Get(0).(func(string) model.UserDto); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(model.UserDto)
	}

	return r0
}

// GetUserByEmailForAuth provides a mock function with given fields: email
func (_m *UserRepository) GetUserByEmailForAuth(email string) model.User {
	ret := _m.Called(email)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserRepository) GetUserByID(id string) model.UserDto {
	ret := _m.Called(id)

	var r0 model.UserDto
	if rf, ok := ret.Get(0).(func(string) model.UserDto); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.UserDto)
	}

	return r0
}

// UpdateUserById provides a mock function with given fields: id, user
func (_m *UserRepository) UpdateUserById(id string, user model.User) (bool, string) {
	ret := _m.Called(id, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, model.User) bool); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, model.User) string); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
