// Code generated by mockery v2.18.0. DO NOT EDIT.

package jwtmocks

import (
	model "github.com/eminoz/go-api/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// AuthJwt is an autogenerated mock type for the AuthJwt type
type AuthJwt struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: email, password
func (_m *AuthJwt) CreateToken(email string, password string) (model.Token, error) {
	ret := _m.Called(email, password)

	var r0 model.Token
	if rf, ok := ret.Get(0).(func(string, string) model.Token); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(model.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateJWT provides a mock function with given fields: email, role
func (_m *AuthJwt) GenerateJWT(email string, role string) (string, error) {
	ret := _m.Called(email, role)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthJwt interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthJwt creates a new instance of AuthJwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthJwt(t mockConstructorTestingTNewAuthJwt) *AuthJwt {
	mock := &AuthJwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
